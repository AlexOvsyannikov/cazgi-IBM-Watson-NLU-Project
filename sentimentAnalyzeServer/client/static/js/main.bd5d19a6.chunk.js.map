{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","props","className","Object","entries","this","emotions","map","row","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderOutput","input_mode","setState","sendForSentimentAnalysis","url","baseUrl","document","getElementById","value","console","log","fetch","then","response","json","data","polarity","output","color","style","fontSize","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8QA8BeA,E,kDA1BX,WAAYC,GAAQ,uCACVA,G,0CAEV,WAEE,OACE,8BACE,uBAAOC,UAAU,uBAAjB,SACE,gCAEIC,OAAOC,QAAQC,KAAKJ,MAAMK,UAAUC,KAAI,SAAAC,GACpC,OACI,+BACI,6BAAKA,EAAI,KACT,6BAAKA,EAAI,qB,GAfVC,IAAMC,WC0FlBC,E,4MA/EbC,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,WAAU,G,EAQlBC,aAAe,SAACC,GACd,IAAIP,EAAO,EACPG,EAAO,MAEO,SAAfI,IACDJ,EAAO,OACPH,EAAO,IAEP,EAAKQ,SAAS,CAACT,UAAU,0BAAUC,KAAMA,EAAMC,KAAK,KAAKC,GAAG,cAC5DC,KAAMA,EACNC,gBAAgB,GAChBC,WAAU,K,EAIdI,yBAA2B,WACzB,EAAKD,SAAS,CAACH,WAAU,IACzB,IAAIF,EAAO,EAAKL,MAAMK,KAChBO,EAAMC,KAAcR,EAAO,cAAeA,EAAO,IAAIS,SAASC,eAAe,aAAaC,MAChGC,QAAQC,IAAIN,GAEZO,MAAMP,GAAKQ,MAAK,SAACC,GACbA,EAASC,OAAOF,MAAK,SAACG,GACtB,EAAKb,SAAS,CAACJ,gBAAgBiB,EAAKC,WACpCP,QAAQC,IAAIK,EAAI,UAChB,IAAIE,EAASF,EAAKC,SACdE,EAAQ,QACZ,OAAOD,GACL,IAAK,WAAYC,EAAQ,QAAQ,MACjC,IAAK,UAAWA,EAAQ,SAAS,MACjC,IAAK,WAAYA,EAAQ,MAAM,MAC/B,QAASA,EAAQ,QAEnBD,EAAS,qBAAKE,MAAO,CAACD,MAAMA,EAAME,SAAS,IAAlC,SAAwCH,IACjD,EAAKf,SAAS,CAACJ,gBAAgBmB,W,EAIrCI,uBAAyB,WAEvB,EAAKnB,SAAS,CAACH,WAAU,IACzB,IAAIF,EAAO,EAAKL,MAAMK,KAClBO,EAAMC,KAAcR,EAAO,YAAaA,EAAO,IAAIS,SAASC,eAAe,aAAaC,MAE5FG,MAAMP,GAAKQ,MAAK,SAACC,GACfA,EAASC,OAAOF,MAAK,SAACG,GACtB,EAAKb,SAAS,CAACJ,gBAAgB,cAAC,EAAD,CAAcZ,SAAU6B,a,4CAK3D,WAAU,IAAD,OACP,OACE,sBAAKjC,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAewC,QAAS,WAAK,EAAKtB,aAAa,SAAjE,kBACE,wBAAQlB,UAAU,eAAgBwC,QAAS,WAAK,EAAKtB,aAAa,QAAlE,iBACA,uBAAK,uBACJf,KAAKO,MAAMC,UACZ,uBACA,wBAAQX,UAAU,cAAcwC,QAASrC,KAAKkB,yBAA9C,+BACA,wBAAQrB,UAAU,cAAcwC,QAASrC,KAAKoC,uBAA9C,6BACA,uBACKpC,KAAKO,MAAMM,uB,GAhFNT,IAAMC,WCKTiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1BgB,K","file":"static/js/main.bd5d19a6.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n      //Returns the emotions as an HTML table\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n                Object.entries(this.props.emotions).map(row => {\n                    return (\n                        <tr>\n                            <td>{row[0]}</td>\n                            <td>{row[1]}</td>\n                        </tr>\n                    )\n                })\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nvar baseUrl = \".\";\n\n\nclass App extends React.Component {\n    /*\n    We are setting the component as a state named innercomp.\n    When this state is accessed, the HTML that is set as the\n    value of the state, will be returned. The initial input mode\n    is set to text\n    */\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  /*\n  This method returns the component based on what the input mode is.\n  If the requested input mode is \"text\" it returns a textbox with 4 rows.\n  If the requested input mode is \"url\" it returns a textbox with 1 row.\n  */\n  renderOutput = (input_mode)=>{\n    let rows = 1\n    let mode = \"url\"\n    //If the input mode is text make it 4 lines\n    if(input_mode === \"text\"){\n      mode = \"text\"\n      rows = 10\n    }\n      this.setState({innercomp:<textarea rows={rows} cols=\"50\" id=\"textinput\"/>,\n      mode: mode,\n      sentimentOutput:[],\n      sentiment:true\n      });\n  } \n  \n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let mode = this.state.mode;\n      let url = baseUrl+\"/\" + mode + \"/sentiment?\"+ mode + \"=\"+document.getElementById(\"textinput\").value;\n    console.log(url);\n\n    fetch(url).then((response)=>{\n        response.json().then((data)=>{\n        this.setState({sentimentOutput:data.polarity});\n        console.log(data['polarity']);\n        let output = data.polarity;\n        let color = \"white\"\n        switch(output) {\n          case \"positive\": color = \"green\";break;\n          case \"neutral\": color = \"yellow\";break;\n          case \"negative\": color = \"red\";break;\n          default: color = \"black\";\n        }\n        output = <div style={{color:color,fontSize:20}}>{output}</div>\n        this.setState({sentimentOutput:output});\n      })});\n  }\n\n  sendForEmotionAnalysis = () => {\n\n    this.setState({sentiment:false});\n    let mode = this.state.mode\n    let url = baseUrl+\"/\" + mode + \"/emotion?\"+ mode + \"=\"+document.getElementById(\"textinput\").value;\n\n    fetch(url).then((response)=>{\n      response.json().then((data)=>{\n      this.setState({sentimentOutput:<EmotionTable emotions={data}/>});\n  })})  ;\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={()=>{this.renderOutput('text')}}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={()=>{this.renderOutput('url')}}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}